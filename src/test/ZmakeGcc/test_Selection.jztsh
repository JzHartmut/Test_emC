##not necessary because unix_script.bat is used anycase: call ..\..\..\src\buildScripts\-setEnv.bat test_Selection.jzT.cmd
#@echo off
#REM invoke from current dir, where this file is stored.
#SET LOGDIR=%CD%\test_Selection_Log_deleteMe
#if not exist %LOGDIR% mkdir %LOGDIR% 
#REM invokes the stimuli selection GUI
#REM Decision which SWT library should be used depends on the java version 32 or 64, not on the Operation System.
#::set SWTJAR=org.eclipse.swt.win32.win32.x86_3.5.1.v3555a.jar  ##for Win32
if test "$OS" = "Windows_NT"; then ##Win64
  CP="tools/vishiaGui.jar;tools/vishiaBase.jar;tools/org.eclipse.swt.win32.win32.x86_64.jar"
else
  CP="tools/vishiaGui.jar:tools/vishiaBase.jar:tools/swt-4.18M1-gtk-linux-x86_64.jar"
fi
#REM if javaw is used, the console window remain open but can be closed manually independent of the java run.
#REM The >out and >err can be used. If start is used here, >out and >err do not work. 
#REM Then no information is given on faulty conditions, especially missing jars.
#REM Therefore 'start' cannot be used here.
#REM write out the command line to help explore the starting conditions on faulty situation:
#@echo on  
cd ../../..
#call -setEnv.bat
pwd
#REM call the GUI. This file %0 is used as argument for SimSelector. It contains all control after the JZtxtcmd label
echo java -cp $CP org.vishia.simSelector.SimSelector src/test/ZmakeGcc/test_Selection.jzT.sh -size:D 
java -cp $CP org.vishia.simSelector.SimSelector src/test/ZmakeGcc/test_Selection.jzT.sh -size:D
#::1>%LOGDIR%\log.txt 2>%LOGDIR%\err.txt

#@echo off
#::type %LOGDIR%\err.txt
#::if errorlevel 1 pause
#REM exit /b means, the console window remain open though this called batch will be finished. exit pure closes the console.
#exit /b 
exit

==JZtxtcmd==

include genScripts_emC.jztc;
include ../testScripts/test_tables.jztc;

currdir = <:><&scriptdir>/../../..<.>;

##
##This routine will be called from inside the Java programm org.vishia.simSelector.SimSelector
##  on the button gen selection. It generates all selected test cases.
##  @args: Map linex contains some named variables which are processed in genSelection(...)
##
sub btnGenSelection(Map line1, Map line2, Map line3, Map line4, Map line5, Map line6){
  if(File:"build".exists()) {
    Openfile fAllsh = "build/testCurrSel.sh";      ##Helper to execute with "press any key" on end. 
    <+fAllsh><:># Test script for the selected test:
  ===========#the current dir should be the root of the Sandbox (working tree):  
  ===========if test -f ../build/testCurrSel.sh; then cd ..; fi
  ===========if test -f build/testCurrSel.out; then rm build/testCurrSel.out; fi
  ===========<.><.+n>
    Openfile fAllBat = "build/testCurrSel.bat";      ##Helper to execute with "press any key" on end. 
    <+fAllBat>
    if exist testCurrSel.out del /S/Q testCurrSel.out
    <.+n>
  } else {
    Obj fAllsh;   //It is null
    Obj fAllBat; 
  }
  call genSelection(line1 = line1, line2 = line2, line3 = line3, line4 = line4, line5 = line5, line6 = line6
              , fAllsh = fAllsh, fAllBat = fAllBat, ccSet=ccSetDeflt, testoutpath=<:>build/testCurrSel.out<.>);
  
  if(fAllsh) {
    <+fAllsh>read -n1 -r -p "Press any key to continue..."<.+n>
    fAllsh.close();            
  }
}



##
##This routine will be called from inside the Java programm org.vishia.simSelector.SimSelector
##  on the button with given button text as first argument of this.
##Note: It is the exec key. The gui reads exec1 ... exec4 and creates up to 4 exec keys.
##
sub btnExec1(String button="exec Selection", Map line1, Map line2, Map line3, Map line4, Map line5, Map line6){
  cmd cmd.exe /C start sh.exe -c build/testCurrSel.sh;
}


##
##
##This routine will be called from inside the Java programm org.vishia.simSelector.SimSelector
##  on the button gen testcases. It generates all selected test cases.
##
sub genTestcases ( String select, String name = "testSelectionGUI"
    , Obj ccSet=ccSetDeflt      ##Variables which determines the compilation, setting
        
    ){
  <+out><&scriptdir>/<&scriptfile>: genTestcases( name = <&name>, select=
  <&select><.+n>
  Num ixcase = 1;
  Openfile fAllsh = <:>build/<&name>.sh<.>;                         ##build/testCase.sh for all tests 
  ##Openfile fcsv = <:><&dirSimulink>/<&fileTestCases_m>.csv<.>; 
  <+fAllsh><:>
===========echo off
===========echo all output > build/result/all.out
===========if test -e ../build; then cd ..; fi
===========if test -f build/result/<&name>.out; then rm build/result/<&name>.out; fi
===========if test -f build/result/gcc_nocc.txt; then rm build/result/gcc_nocc.txt; fi
===========echo "==== new test select=<&select> ====" > build/result/<&name>.out
===========##date >> build/result/<&name>.out ##hint: the date disturbs comparability!
===========echo "==================================" >> build/result/<&name>.out   
===========#All test cases
===========<.><.+>

  Openfile fAllBat = <:>build/<&name>.bat<.>;                         ##build/testCase.bat for all tests                         
  <+fAllBat><:>
============echo all output > build/result/all.out
============::if exist build cd build
============if exist build\result\<&name>.out del /S/Q build\result\<&name>.out
============echo "==== new test select=<&select> ====" >build\result\<&name>.out
============::date >> <&name>.out
============echo "==================================" >>build\result\<&name>.out
============::All test cases
============<.><.+>

  Obj testcases = java org.vishia.testutil.TestConditionCombi.prepareTestCases(select, 6); 
  for(testcase: testcases) { //The order in the testcase is always the order in the tabs.
    Obj lineRefl =    tabRefl.get(   testcase[0].sel);
    Obj lineStr =     tabStr.get(    testcase[1].sel);
    Obj lineCpp =     tabCpp.get(    testcase[2].sel);
    Obj lineThCxt =   tabThCxt.get(  testcase[3].sel);
    Obj lineExc =     tabExc.get(    testcase[4].sel);
    Obj lineTestSrc = tabTestSrc.get(testcase[5].sel);

    <+out>Select: <&lineRefl.name> <&lineStr.name> <&lineCpp.name> <&lineThCxt.name> <&lineExc.name> <&lineTestSrc.name><.+n>
    call genSelection(line1=lineRefl, line2=lineStr, line3=lineCpp, line4=lineThCxt, line5=lineExc, line6=lineTestSrc
                      , fAllsh = fAllsh, fAllBat = fAllBat, ccSet=ccSet, testoutpath = <:>build/result/<&name>.out<.>);   
    ixcase = ixcase + 1; 

  } ##for testcases
  ##<+fcsv>"Name", "Description", "todo",<.+n>    
  ##<+fAllsh>read -n1 -r -p "Press any key to continue..."<.+n>
  fAllsh.close();      
  <+fAllBat>pause<.+n>
  fAllBat.close();      
  Obj fileAllsh = new java.io.File(<:>build/<&name>.sh<.>);
  fileAllsh.setExecutable(true);   ##for linux, chmod to executable
  ##fcsv.close();
}

     



##
##This operation is kind of common but adapted to the test cases. 
##It is called here from execSelection button and from genTestcases
##
sub genSelection ( Map line1, Map line2, Map line3, Map line4, Map line5, Map line6
    , Obj ccSet      ##Variables which determines the compilation, setting
    , Obj fAllsh
    , Obj fAllBat
    , String testoutpath
    ){

  List defines;                                                                                                                               
  defines += line1.def1;
  if(line1.def2) { 
    defines += line1.def2;
  }
  if(line1.def3) { 
    defines += line1.def3;
  }
  if(line1.def4) { 
    defines += line1.def4;
  }
  ##
  defines += line2.def1;
  if(line2.def2) { 
    defines += line2.def2;
  }
  ##
  defines += line4.def1;
  if(line4.def2) { 
    defines += line4.def2;
  }
  defines += line5.def1;
  if(line5.def2) {                                                                                                                                       
    defines += line5.def2;
  }
  defines += line6.def1;
  
  ##testCase is the name of the script file to compile. 
  String testCase = <:>test_<&line1.name>_<&line2.name>_<&line3.name>_<&line4.name>_<&line5.name>_<&line6.name><.>;
  <+out>
  <:>
  Selection creates make_<&testCase>.sh
  <.><.+> 
  ##
  ##                                ## writes to fAllsh, it is the shell script to invoke all tests:
  if(fAllsh) {
    <+fAllsh><: >
      <:><: >
      echo TEST invokes build/objZmake/make_<&testCase>.sh
======build/objZmake/make_<&testCase>.sh
======<.><.+>
  }
  ##
  ##                                ## writes to fAllBat, it is the shell script to invoke all tests:
  if(fAllsh) {
    <+fAllBat>
    echo invokes build/objZmake/make_<&testCase>.sh, compile all:
    call unix_script.bat build/objZmake/make_<&testCase>.sh
    <.+>
  }
  ##
  ##                                ## Writes a header for visual Studio test
  <+out>Generates: src/test/cpp/emC_TestAll/fDefSelection.h<.+n>
  Openfile fDefH = "src/test/cpp/emC_TestAll/fDefSelection.h";
  <+fDefH><: >
    <:><: >
    //This file is produced by running the sim selection tool.
====#define DEFINED_fDefSelection
====
====//The next defines contains the selection:
====<:for:define:defines>#define <&define>
====<.for>
====<.><.+>
  fDefH.close();
  ##
  ##                                ## The following subroutine generates the script with compiling statements 
  ##                                ## which invokes the test also.
  if(fAllsh) {                      ## only generate if also the fAllsh is generated, elsewhere build/ does not exists
    call build_dbgC1(testCase=testCase, defines = defines, srcSet = &(line6.srcSet), ccSet=ccSet ); ##srcset_Basics); ##
  }
  ##
  ##                                ## to repeat the specific test only the last one routine need invoked.
}










