#REM: invoked either from root of Test_emC or from current dir,
#REM but should work from point root of Test_emC
if test -f ../../../src/version_Test_emC.txt; then cd ../../..; fi
pwd

java -jar libs/vishiaBase.jar src/test/ZmakeGcc/evalTests.jztsh                                                                                          

read -n1 -r -p "Press any key to continue..."

exit 0  ##the rest of the file is the JZtxtcmd script                                      
                                                                   
==JZtxtcmd==

include ../ZmakeGcc/test_Selection.jztsh;

currdir=<:><&scriptdir>/../../..<.>;                             

main() {
  call eval1();
}

sub eval1() {
  
  ##for(lineTestSrc: tabTestSrc) {
    ##String nameFnames = <:>build/evalTest_TestEvMsg.txt<.>; 
    ##Openfile fname = nameFnames;                                            
    Stringjar problems;
    Stringjar evalTxt;
    Stringjar h1;
    Stringjar h2;
    Stringjar h3;
    Stringjar h4;
    for(lineStr: tabStr) {
      for(lineThCxt: tabThCxt) {             ##build header line with 1 char
        for(lineExc: tabExc) {                                  
          for(lineCpp: tabCpp) {
             h1 += lineStr.sh; h2 += lineThCxt.sh; h3 += lineExc.sh; h4 += lineCpp.sh; 
    } } } }
    for(line: tabStr) {
      h1 += <:>  <&line.sh>:<&line.name><.>;  ##add legend
    }
    for(line: tabThCxt) {
      h2 += <:>  <&line.sh>:<&line.name><.>;
    }
    for(line: tabExc) {
      h3 += <:>  <&line.sh>:<&line.name><.>;
    }
    for(line: tabCpp) {
      h4 += <:>  <&line.sh>:<&line.name><.>;
    }
    evalTxt += <:><&h1><:n><.>;                  ##write column header
    evalTxt += <:><&h2><:n><.>;
    evalTxt += <:><&h3><:n><.>;
    evalTxt += <:><&h4><:n><.>;
    ##
    for(lineTestSrc: tabTestSrc) {                       ##iterate through all possible test cases                            
      for(lineRefl: tabRefl) {                 ##as lines                 
        List testNames;
        for(lineStr: tabStr) {
          for(lineThCxt: tabThCxt) {             ##build the file name of the test case
            for(lineExc: tabExc) {                                  
              for(lineCpp: tabCpp) {
                String testName = <:>test_<&lineRefl.name>_<&lineStr.name>_<&lineCpp.name>_<&lineThCxt.name>_<&lineExc.name>_<&lineTestSrc.name><.>;
                testNames += testName;             ##add the file names to the list, it is all test names in the row for all columns
        } } } }                                   ##the evaluation routine checks the files of content. 
        String line = java org.vishia.testutil.EvalTestoutfiles.evalFiles(
                          testNames, File:"build/result", problems);
        evalTxt += <:><&line> - <&lineRefl.name> - <&lineStr.name> - <&lineTestSrc.name><:n><.>;
    } }
    ##fname.close();
    evalTxt += problems;
    java org.vishia.util.FileFunctions.writeFile(evalTxt, File:"build/eval.txt");
    onerror {
      <:>error evalFiles <&error><:n><.>
    }
}

